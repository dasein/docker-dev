#!/usr/bin/env python

"""Install dependencies for a docker dev environment

This utility installs dependencies to do local development on OSX with
docker and kubernetes. To upgrade to the latest version of the docker
development tools, just run:

   docker-dev upgrade

This command uses ansible the the brew package repository to install all
required dependencies. Once run, you can use some of the tools installed to
begin working with docker or kubernetes.

To bring up a kubernetes development enviroment using minikube, run the
following:

   minikube start --vm-driver vmwarefusion
                  --cpus 4
                  --memory 4096
                  --disk-size 50
   eval $(minikube docker-env)

To bring docker only dev enviroment using docker-machine, run this:

   docker-machine create dev --driver vmwarefusion
                             --vmwarefusion-cpu-count 4
                             --vmwarefusion-memory-size 4096
                             --vmwarefusion-disk-size 50000
   eval $(docker-machine env dev)

"""
import argparse
import datetime
import logging
import os
import pickle
import subprocess
import re
import sys


class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    """Argparse formatter to display __doc__ string correctly"""
    pass


CWD = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


parser = argparse.ArgumentParser(description=__doc__,
                                 formatter_class=CustomFormatter)
parser.add_argument('-v', '--verbose', dest='verbose',
                    action='store_true',
                    help='Be more verbose about what docker-dev is doing.')
parser.add_argument('-b', '--branch', dest='GIT_BRANCH',
                    default=os.getenv('GIT_BRANCH', 'master'),
                    help='What docker-dev branch/tag to track for upgrades')

log = logging.getLogger('docker-dev')


def cmd(cmd, output=False, cwd=CWD):
    """Run shell cmd and return exit status or output"""

    log.debug('Running cmd: %s', cmd)
    if output:
        run = subprocess.check_output
    else:
        run = subprocess.check_call

    try:
        out = run(cmd, shell=True, cwd=cwd)
    except subprocess.CalledProcessError, e:
        sys.exit(1)

    return out

def version(args):
    """Returns versions  the current dev environment"""
    kubectl = re.findall('GitVersion:"(.*?)"', cmd('kubectl version --client || :', output=True))
    minikube = re.findall('minikube version: (.*)', cmd('minikube version || :', output=True))
    compose = re.findall('version (.*?),', cmd('docker-compose version || :', output=True))
    docker = re.findall('^(v.*?)$', cmd('docker version --format="v{{.Client.Version}}" || :', output=True))

    print 'docker-dev: %s' % cmd('git log --oneline -n1', output=True).strip()
    print 'kubectl client: %s' % tuple(kubectl)
    print 'minikube: %s' % tuple(minikube)
    print 'docker-compose: %s' % tuple(compose)
    print 'docker client: %s' % tuple(docker)

def upgrade(args):
    """Upgrades docker-dev to the latest version"""
    if CWD == '/usr/local/docker-dev':
        cmd('git fetch -q https://github.com/dasein/docker-dev.git %s' % args.GIT_BRANCH)
        cmd('git reset --hard FETCH_HEAD')
    else:
        log.info('docker-dev is not installed in /usr/local (Skipping git update)')

    playbook = os.path.join(CWD, 'ansible/docker.yml')
    cmd('ansible-playbook %(playbook)s -i 127.0.0.1,' % locals())


def _check_for_update():
    now = datetime.datetime.now()
    last_checked_file = os.path.join(CWD, '.check_update')

    try:
        check = pickle.load(open(last_checked_file, "rb"))
    except IOError:
        check = now
        pickle.dump(now, open(last_checked_file, "wb"))

    last_checked = now - check
    if last_checked.days >= 1:
        cmd('git fetch origin')
        pickle.dump(now, open(last_checked_file, "wb"))


def _deprecated(args):
    """This command has been removed"""
    log.error('docker-dev no longer supports this command')
    log.error('Please run "docker-dev --help" for more info')


def main():
    """Setup and invoke docker-dev environment"""
    logging.basicConfig(stream=sys.stderr, format='[%(levelname)s] %(message)s')

    commands = [upgrade, version]
    deprecated_commands = ["ls", "kup", "kdown", "create", "start", "stop", "rm"]

    subparsers = parser.add_subparsers()
    for command in commands:
        s = subparsers.add_parser(command.__name__, help=command.__doc__)
        s.set_defaults(func=command)

    for command in deprecated_commands:
        s = subparsers.add_parser(command, help=_deprecated.__doc__)
        s.set_defaults(func=_deprecated)

    args = parser.parse_args()

    if args.verbose:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    _check_for_update()
    diff = cmd('git log remotes/origin/master ^HEAD', output=True)
    if diff:
        log.warn('Update available. Run "docker-dev upgrade"')

    args.func(args)


if __name__ == '__main__':
    main()
